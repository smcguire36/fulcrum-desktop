'use strict';

var _electron = require('electron');

var _electronLog = require('electron-log');

var _electronLog2 = _interopRequireDefault(_electronLog);

var _electronUpdater = require('electron-updater');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_electronUpdater.autoUpdater.logger = _electronLog2.default;
_electronUpdater.autoUpdater.logger.transports.file.level = 'info';

_electronLog2.default.info('Auto-updater starting...');

_electronUpdater.autoUpdater.on('checking-for-update', () => {
  console.log('Checking for update...');
});

_electronUpdater.autoUpdater.on('update-available', (ev, info) => {
  console.log('Update available.');
});

_electronUpdater.autoUpdater.on('update-not-available', (ev, info) => {
  console.log('Update not available.');
});

_electronUpdater.autoUpdater.on('error', (ev, err) => {
  console.log('Error in auto-updater.');
});

_electronUpdater.autoUpdater.on('download-progress', (ev, progressObj) => {
  console.log('Download progress...');
});

_electronUpdater.autoUpdater.on('update-downloaded', (ev, info) => {
  console.log('Update downloaded; will install in 5 seconds');
});

_electronUpdater.autoUpdater.on('update-downloaded', (ev, info) => {
  setTimeout(function () {
    _electronUpdater.autoUpdater.quitAndInstall();
  }, 5000);
});

_electron.app.on('ready', function () {
  if (process.env.DEVELOPMENT) {
    return;
  }

  _electronUpdater.autoUpdater.checkForUpdates();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9hdXRvLXVwZGF0ZXIuanMiXSwibmFtZXMiOlsibG9nZ2VyIiwidHJhbnNwb3J0cyIsImZpbGUiLCJsZXZlbCIsImluZm8iLCJvbiIsImNvbnNvbGUiLCJsb2ciLCJldiIsImVyciIsInByb2dyZXNzT2JqIiwic2V0VGltZW91dCIsInF1aXRBbmRJbnN0YWxsIiwicHJvY2VzcyIsImVudiIsIkRFVkVMT1BNRU5UIiwiY2hlY2tGb3JVcGRhdGVzIl0sIm1hcHBpbmdzIjoiOztBQUFBOztBQUNBOzs7O0FBQ0E7Ozs7QUFFQSw2QkFBWUEsTUFBWjtBQUNBLDZCQUFZQSxNQUFaLENBQW1CQyxVQUFuQixDQUE4QkMsSUFBOUIsQ0FBbUNDLEtBQW5DLEdBQTJDLE1BQTNDOztBQUVBLHNCQUFJQyxJQUFKLENBQVMsMEJBQVQ7O0FBRUEsNkJBQVlDLEVBQVosQ0FBZSxxQkFBZixFQUFzQyxNQUFNO0FBQzFDQyxVQUFRQyxHQUFSLENBQVksd0JBQVo7QUFDRCxDQUZEOztBQUlBLDZCQUFZRixFQUFaLENBQWUsa0JBQWYsRUFBbUMsQ0FBQ0csRUFBRCxFQUFLSixJQUFMLEtBQWM7QUFDL0NFLFVBQVFDLEdBQVIsQ0FBWSxtQkFBWjtBQUNELENBRkQ7O0FBSUEsNkJBQVlGLEVBQVosQ0FBZSxzQkFBZixFQUF1QyxDQUFDRyxFQUFELEVBQUtKLElBQUwsS0FBYztBQUNuREUsVUFBUUMsR0FBUixDQUFZLHVCQUFaO0FBQ0QsQ0FGRDs7QUFJQSw2QkFBWUYsRUFBWixDQUFlLE9BQWYsRUFBd0IsQ0FBQ0csRUFBRCxFQUFLQyxHQUFMLEtBQWE7QUFDbkNILFVBQVFDLEdBQVIsQ0FBWSx3QkFBWjtBQUNELENBRkQ7O0FBSUEsNkJBQVlGLEVBQVosQ0FBZSxtQkFBZixFQUFvQyxDQUFDRyxFQUFELEVBQUtFLFdBQUwsS0FBcUI7QUFDdkRKLFVBQVFDLEdBQVIsQ0FBWSxzQkFBWjtBQUNELENBRkQ7O0FBSUEsNkJBQVlGLEVBQVosQ0FBZSxtQkFBZixFQUFvQyxDQUFDRyxFQUFELEVBQUtKLElBQUwsS0FBYztBQUNoREUsVUFBUUMsR0FBUixDQUFZLDhDQUFaO0FBQ0QsQ0FGRDs7QUFJQSw2QkFBWUYsRUFBWixDQUFlLG1CQUFmLEVBQW9DLENBQUNHLEVBQUQsRUFBS0osSUFBTCxLQUFjO0FBQ2hETyxhQUFXLFlBQVc7QUFDcEIsaUNBQVlDLGNBQVo7QUFDRCxHQUZELEVBRUcsSUFGSDtBQUdELENBSkQ7O0FBTUEsY0FBSVAsRUFBSixDQUFPLE9BQVAsRUFBZ0IsWUFBVztBQUN6QixNQUFJUSxRQUFRQyxHQUFSLENBQVlDLFdBQWhCLEVBQTZCO0FBQzNCO0FBQ0Q7O0FBRUQsK0JBQVlDLGVBQVo7QUFDRCxDQU5EIiwiZmlsZSI6ImF1dG8tdXBkYXRlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFwcCB9IGZyb20gJ2VsZWN0cm9uJztcclxuaW1wb3J0IGxvZyBmcm9tICdlbGVjdHJvbi1sb2cnO1xyXG5pbXBvcnQgeyBhdXRvVXBkYXRlciB9IGZyb20gJ2VsZWN0cm9uLXVwZGF0ZXInO1xyXG5cclxuYXV0b1VwZGF0ZXIubG9nZ2VyID0gbG9nO1xyXG5hdXRvVXBkYXRlci5sb2dnZXIudHJhbnNwb3J0cy5maWxlLmxldmVsID0gJ2luZm8nO1xyXG5cclxubG9nLmluZm8oJ0F1dG8tdXBkYXRlciBzdGFydGluZy4uLicpO1xyXG5cclxuYXV0b1VwZGF0ZXIub24oJ2NoZWNraW5nLWZvci11cGRhdGUnLCAoKSA9PiB7XHJcbiAgY29uc29sZS5sb2coJ0NoZWNraW5nIGZvciB1cGRhdGUuLi4nKTtcclxufSk7XHJcblxyXG5hdXRvVXBkYXRlci5vbigndXBkYXRlLWF2YWlsYWJsZScsIChldiwgaW5mbykgPT4ge1xyXG4gIGNvbnNvbGUubG9nKCdVcGRhdGUgYXZhaWxhYmxlLicpO1xyXG59KTtcclxuXHJcbmF1dG9VcGRhdGVyLm9uKCd1cGRhdGUtbm90LWF2YWlsYWJsZScsIChldiwgaW5mbykgPT4ge1xyXG4gIGNvbnNvbGUubG9nKCdVcGRhdGUgbm90IGF2YWlsYWJsZS4nKTtcclxufSk7XHJcblxyXG5hdXRvVXBkYXRlci5vbignZXJyb3InLCAoZXYsIGVycikgPT4ge1xyXG4gIGNvbnNvbGUubG9nKCdFcnJvciBpbiBhdXRvLXVwZGF0ZXIuJyk7XHJcbn0pO1xyXG5cclxuYXV0b1VwZGF0ZXIub24oJ2Rvd25sb2FkLXByb2dyZXNzJywgKGV2LCBwcm9ncmVzc09iaikgPT4ge1xyXG4gIGNvbnNvbGUubG9nKCdEb3dubG9hZCBwcm9ncmVzcy4uLicpO1xyXG59KTtcclxuXHJcbmF1dG9VcGRhdGVyLm9uKCd1cGRhdGUtZG93bmxvYWRlZCcsIChldiwgaW5mbykgPT4ge1xyXG4gIGNvbnNvbGUubG9nKCdVcGRhdGUgZG93bmxvYWRlZDsgd2lsbCBpbnN0YWxsIGluIDUgc2Vjb25kcycpO1xyXG59KTtcclxuXHJcbmF1dG9VcGRhdGVyLm9uKCd1cGRhdGUtZG93bmxvYWRlZCcsIChldiwgaW5mbykgPT4ge1xyXG4gIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICBhdXRvVXBkYXRlci5xdWl0QW5kSW5zdGFsbCgpO1xyXG4gIH0sIDUwMDApO1xyXG59KTtcclxuXHJcbmFwcC5vbigncmVhZHknLCBmdW5jdGlvbigpIHtcclxuICBpZiAocHJvY2Vzcy5lbnYuREVWRUxPUE1FTlQpIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIGF1dG9VcGRhdGVyLmNoZWNrRm9yVXBkYXRlcygpO1xyXG59KTtcclxuIl19